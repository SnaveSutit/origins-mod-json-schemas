{"type":"object","properties":{"trigger_order":{"enum":["by_distance","unspecified"],"default":"unspecified","description":"Determines whether the power type should prioritize game events by distance (`\"by_distance\"`) or arbitrarily (`\"unspecified\"`).","markdownDescription":"Determines whether the power type should prioritize game events by distance (`\"by_distance\"`) or arbitrarily (`\"unspecified\"`)."},"entity":{"type":"boolean","default":true,"description":"Determines whether the power type should listen to game events emitted by entities.","markdownDescription":"Determines whether the power type should listen to game events emitted by entities."},"block":{"type":"boolean","default":true,"description":"Determines whether the power type should listen to game events emitted by blocks.","markdownDescription":"Determines whether the power type should listen to game events emitted by blocks."},"bientity_action":{"$ref":"../bientity_action.json","description":"If specified, this action will be executed on either or both the '*_actor_*' and '*_target_*' entities.","markdownDescription":"If specified, this action will be executed on either or both the '*_actor_*' and '*_target_*' entities."},"bientity_condition":{"$ref":"../bientity_condition.json","description":"If specified, the specified actions will only be executed if this condition is fulfilled by either or both '*_actor_*' and '*_target_*' entities.","markdownDescription":"If specified, the specified actions will only be executed if this condition is fulfilled by either or both '*_actor_*' and '*_target_*' entities."},"block_action":{"$ref":"../block_action.json","description":"If specified, this block action type will be executed at the position where the game event or vibration was emitted.","markdownDescription":"If specified, this block action type will be executed at the position where the game event or vibration was emitted."},"block_condition":{"$ref":"../block_condition.json","description":"If specified, only executes the actions if the game event or vibration is emitted by a block that fulfills the block condition.","markdownDescription":"If specified, only executes the actions if the game event or vibration is emitted by a block that fulfills the block condition."},"cooldown":{"type":"integer","default":1,"description":"Interval of ticks this power needs to recharge before being able to listen to game events or vibrations again.","markdownDescription":"Interval of ticks this power needs to recharge before being able to listen to game events or vibrations again."},"hud_render":{"$ref":"../types/hud_render.json","description":"Determines how the cooldown of this power is visualized on the HUD.","markdownDescription":"Determines how the cooldown of this power is visualized on the HUD."},"event":{"$ref":"../types/autofill_helpers/game_event_identifier.json","description":"If specified, will make the power only listen for the game events with this namespace and IDs.","markdownDescription":"If specified, will make the power only listen for the game events with this namespace and IDs."},"events":{"type":"array","items":{"$ref":"../types/autofill_helpers/game_event_identifier.json"},"description":"If specified, will make the power only listen for the game events with these namespace and IDs.","markdownDescription":"If specified, will make the power only listen for the game events with these namespace and IDs."},"event_tag":{"$ref":"../types/identifier.json","description":"If specified, will make the power only listen for the game events inside game event tag.","markdownDescription":"If specified, will make the power only listen for the game events inside game event tag."},"show_particle":{"type":"boolean","default":true,"description":"Determines whether the vibration should emit a particle effect.","markdownDescription":"Determines whether the vibration should emit a particle effect."},"type":{"description":"## Game Event Listener\n\n---\n\n\n[Power Type](https://origins.readthedocs.io/en/latest/types/power_types/game_event_listener)\n\nExecutes an action upon listening to a game event or vibration.\n\nType ID: `origins:game_event_listener`\n\n\n\n---\n\n### üìù Note\n\nIn the context of this power type, the '__actor__' entity is the entity that emmited the game event or vibration while the '__target__' entity is the entity that has the power.\n\n\n\n\n\n---\n\n### üìù Note\n\nSee [Minecraft Wiki: Sculk Sensor (Vibration amplitudes)](https://origins.readthedocs.io/en/latest/types/power_types/game_event_listener) for a list of vanilla game events you can check for.\n\n\n\n---\n\n### Examples\n\n```json\n{\n    \"type\": \"origins:game_event_listener\",\n    \"bientity_action\": {\n        \"type\": \"origins:target_action\",\n        \"action\": {\n            \"type\": \"origins:set_on_fire\",\n            \"duration\": 5\n        }\n    },\n    \"event\": \"minecraft:hit_ground\"\n}\n```\n\nThis example will set the entity with the power on fire every time the `hit_ground` game event is emmited.\n","markdownDescription":"## Game Event Listener\n\n---\n\n\n[Power Type](https://origins.readthedocs.io/en/latest/types/power_types/game_event_listener)\n\nExecutes an action upon listening to a game event or vibration.\n\nType ID: `origins:game_event_listener`\n\n\n\n---\n\n### üìù Note\n\nIn the context of this power type, the '__actor__' entity is the entity that emmited the game event or vibration while the '__target__' entity is the entity that has the power.\n\n\n\n\n\n---\n\n### üìù Note\n\nSee [Minecraft Wiki: Sculk Sensor (Vibration amplitudes)](https://origins.readthedocs.io/en/latest/types/power_types/game_event_listener) for a list of vanilla game events you can check for.\n\n\n\n---\n\n### Examples\n\n```json\n{\n    \"type\": \"origins:game_event_listener\",\n    \"bientity_action\": {\n        \"type\": \"origins:target_action\",\n        \"action\": {\n            \"type\": \"origins:set_on_fire\",\n            \"duration\": 5\n        }\n    },\n    \"event\": \"minecraft:hit_ground\"\n}\n```\n\nThis example will set the entity with the power on fire every time the `hit_ground` game event is emmited.\n"}},"x-intellij-html-description":"<hr>\n<h2>title: Game Event Listener (Power Type)\ndate: 2023-10-09</h2>\n<h1>Game Event Listener</h1>\n<p><a href=\"../power_types.md\">Power Type</a></p>\n<p>Executes an action upon listening to a game event or vibration.</p>\n<p>Type ID: <code>origins:game_event_listener</code></p>\n<p>!!! note</p>\n<pre><code>In the context of this power type, the &#39;**actor**&#39; entity is the entity that emmited the game event or vibration while the &#39;**target**&#39; entity is the entity that has the power.\n</code></pre>\n<p>!!! note</p>\n<pre><code>See [Minecraft Wiki: Sculk Sensor (Vibration amplitudes)](https://minecraft.wiki/w/Sculk_Sensor?oldid=2099339#Vibration_amplitudes) for a list of vanilla game events you can check for.\n</code></pre>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>trigger_order</code></td>\n<td><a href=\"../data_types/string.md\">String</a></td>\n<td><code>&quot;unspecified&quot;</code></td>\n<td>Determines whether the power type should prioritize game events by distance (<code>&quot;by_distance&quot;</code>) or arbitrarily (<code>&quot;unspecified&quot;</code>).</td>\n</tr>\n<tr>\n<td><code>entity</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td><code>true</code></td>\n<td>Determines whether the power type should listen to game events emitted by entities.</td>\n</tr>\n<tr>\n<td><code>block</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td><code>true</code></td>\n<td>Determines whether the power type should listen to game events emitted by blocks.</td>\n</tr>\n<tr>\n<td><code>bientity_action</code></td>\n<td><a href=\"../bientity_action_types.md\">Bi-entity Action Type</a></td>\n<td><em>optional</em></td>\n<td>If specified, this action will be executed on either or both the &#39;<strong>actor</strong>&#39; and &#39;<strong>target</strong>&#39; entities.</td>\n</tr>\n<tr>\n<td><code>bientity_condition</code></td>\n<td><a href=\"../bientity_condition_types.md\">Bi-entity Condition Type</a></td>\n<td><em>optional</em></td>\n<td>If specified, the specified actions will only be executed if this condition is fulfilled by either or both &#39;<strong>actor</strong>&#39; and &#39;<strong>target</strong>&#39; entities.</td>\n</tr>\n<tr>\n<td><code>block_action</code></td>\n<td><a href=\"../block_action_types.md\">Block Action Type</a></td>\n<td><em>optional</em></td>\n<td>If specified, this block action type will be executed at the position where the game event or vibration was emitted.</td>\n</tr>\n<tr>\n<td><code>block_condition</code></td>\n<td><a href=\"../block_condition_types.md\">Block Condition Type</a></td>\n<td><em>optional</em></td>\n<td>If specified, only executes the actions if the game event or vibration is emitted by a block that fulfills the block condition.</td>\n</tr>\n<tr>\n<td><code>cooldown</code></td>\n<td><a href=\"../data_types/integer.md\">Integer</a></td>\n<td><code>1</code></td>\n<td>Interval of ticks this power needs to recharge before being able to listen to game events or vibrations again.</td>\n</tr>\n<tr>\n<td><code>hud_render</code></td>\n<td><a href=\"../data_types/hud_render.md\">Hud Render</a></td>\n<td><code>{&quot;should_render&quot;: false}</code></td>\n<td>Determines how the cooldown of this power is visualized on the HUD.</td>\n</tr>\n<tr>\n<td><code>event</code></td>\n<td><a href=\"../data_types/identifier.md\">Identifier</a></td>\n<td><em>optional</em></td>\n<td>If specified, will make the power only listen for the game events with this namespace and IDs.</td>\n</tr>\n<tr>\n<td><code>events</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../data_types/identifier.md\">Identifiers</a></td>\n<td><em>optional</em></td>\n<td>If specified, will make the power only listen for the game events with these namespace and IDs.</td>\n</tr>\n<tr>\n<td><code>event_tag</code></td>\n<td><a href=\"../data_types/identifier.md\">Identifier</a></td>\n<td><em>optional</em></td>\n<td>If specified, will make the power only listen for the game events inside game event tag.</td>\n</tr>\n<tr>\n<td><code>show_particle</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td><code>true</code></td>\n<td>Determines whether the vibration should emit a particle effect.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">{\n    &quot;type&quot;: &quot;origins:game_event_listener&quot;,\n    &quot;bientity_action&quot;: {\n        &quot;type&quot;: &quot;origins:target_action&quot;,\n        &quot;action&quot;: {\n            &quot;type&quot;: &quot;origins:set_on_fire&quot;,\n            &quot;duration&quot;: 5\n        }\n    },\n    &quot;event&quot;: &quot;minecraft:hit_ground&quot;\n}\n</code></pre>\n<p>This example will set the entity with the power on fire every time the <code>hit_ground</code> game event is emmited.</p>\n"}