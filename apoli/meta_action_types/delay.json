{"type":"object","required":["action","ticks"],"properties":{"action":{"$ref":"$actionRef","description":"The action which will be executed after the delay.","markdownDescription":"The action which will be executed after the delay."},"ticks":{"type":"integer","description":"The amount of ticks until the action is executed.","markdownDescription":"The amount of ticks until the action is executed."},"type":{"description":"## Delay\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n\n\n---\n\n### ⚠️ Caution\n\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such a task.\n\n\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:delay\",\n    \"ticks\": 20,\n    \"action\": {\n        \"type\": \"origins:apply_effect\",\n        \"effect\": {\n            \"effect\": \"minecraft:speed\",\n            \"amplifier\": 1,\n            \"duration\": 80\n        }\n    }\n}\n```\nThis example will apply a Speed II status effect after 1 second.\n","markdownDescription":"## Delay\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n\n\n---\n\n### ⚠️ Caution\n\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such a task.\n\n\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:delay\",\n    \"ticks\": 20,\n    \"action\": {\n        \"type\": \"origins:apply_effect\",\n        \"effect\": {\n            \"effect\": \"minecraft:speed\",\n            \"amplifier\": 1,\n            \"duration\": 80\n        }\n    }\n}\n```\nThis example will apply a Speed II status effect after 1 second.\n"}},"x-intellij-html-description":"<hr>\n<h2>title: Delay (Meta Action Type)\ndate: 2021-04-07</h2>\n<h1>Delay</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Executes the provided action after a set amount of ticks.</p>\n<p>Type ID: <code>origins:delay</code></p>\n<p>!!! caution</p>\n<pre><code>Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such a task.\n\nIf you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) and trigger that power with the [Trigger Cooldown (Entity Action Type)](../entity_action_types/trigger_cooldown.md).\n\nYou can then use another power that would use the [Action Over Time (Power Type)](../power_types/action_over_time.md) and check if the value of the power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) is `&quot;==&quot;` to `0` using the [Resource (Entity Condition Type)](../entity_condition_types/resource.md).\n</code></pre>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>action</code></td>\n<td><a href=\"../action_types.md\">Action Type</a></td>\n<td></td>\n<td>The action which will be executed after the delay.</td>\n</tr>\n<tr>\n<td><code>ticks</code></td>\n<td><a href=\"../data_types/integer.md\">Integer</a></td>\n<td></td>\n<td>The amount of ticks until the action is executed.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:delay&quot;,\n    &quot;ticks&quot;: 20,\n    &quot;action&quot;: {\n        &quot;type&quot;: &quot;origins:apply_effect&quot;,\n        &quot;effect&quot;: {\n            &quot;effect&quot;: &quot;minecraft:speed&quot;,\n            &quot;amplifier&quot;: 1,\n            &quot;duration&quot;: 80\n        }\n    }\n}\n</code></pre>\n<p>This example will apply a Speed II status effect after 1 second.</p>\n"}