{"type":"object","properties":{"shape_type":{"$ref":"../types/shape_type.json","description":"Determines how the ray-cast will handle blocks.","markdownDescription":"Determines how the ray-cast will handle blocks."},"fluid_handling":{"$ref":"../types/fluid_handling.json","description":"Determines how the ray-cast will handle fluids.","markdownDescription":"Determines how the ray-cast will handle fluids."},"type":{"description":"## Can See\n\n---\n\n\n[Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/bientity_condition_types/can_see)\n\nChecks whether the straight path from the actor entity's eyes to the target entity's eyes is unobstructed.\n\nType ID: `origins:can_see`\n\n---\n\n### Examples\n\n```json\n\"bientity_condition\": {\n    \"type\": \"origins:can_see\"\n}\n```\n\nThis example will check if the straight path from the actor entity's eyes to the target entity's eyes is unobstructed. If the actor/target is behind a source/flowing fluid, is submerged in any kind of fluids, or behind a block that is not see-through (like Glass), the condition will return false.\n","markdownDescription":"## Can See\n\n---\n\n\n[Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/bientity_condition_types/can_see)\n\nChecks whether the straight path from the actor entity's eyes to the target entity's eyes is unobstructed.\n\nType ID: `origins:can_see`\n\n---\n\n### Examples\n\n```json\n\"bientity_condition\": {\n    \"type\": \"origins:can_see\"\n}\n```\n\nThis example will check if the straight path from the actor entity's eyes to the target entity's eyes is unobstructed. If the actor/target is behind a source/flowing fluid, is submerged in any kind of fluids, or behind a block that is not see-through (like Glass), the condition will return false.\n"}},"x-intellij-html-description":"<hr>\n<h2>title: Can See (Bi-entity Condition Type)\ndate: 2021-10-06</h2>\n<h1>Can See</h1>\n<p><a href=\"../bientity_condition_types.md\">Bi-entity Condition Type</a></p>\n<p>Checks whether the straight path from the actor entity&#39;s eyes to the target entity&#39;s eyes is unobstructed.</p>\n<p>Type ID: <code>origins:can_see</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>shape_type</code></td>\n<td><a href=\"../data_types/shape_type.md\">Shape Type</a></td>\n<td><code>&quot;visual&quot;</code></td>\n<td>Determines how the ray-cast will handle blocks.</td>\n</tr>\n<tr>\n<td><code>fluid_handling</code></td>\n<td><a href=\"../data_types/fluid_handling.md\">Fluid Handling</a></td>\n<td><code>&quot;none&quot;</code></td>\n<td>Determines how the ray-cast will handle fluids.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;bientity_condition&quot;: {\n    &quot;type&quot;: &quot;origins:can_see&quot;\n}\n</code></pre>\n<p>This example will check if the straight path from the actor entity&#39;s eyes to the target entity&#39;s eyes is unobstructed. If the actor/target is behind a source/flowing fluid, is submerged in any kind of fluids, or behind a block that is not see-through (like Glass), the condition will return false.</p>\n"}