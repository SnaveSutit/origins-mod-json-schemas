{
	"type": "object",
	"required": ["type"],
	"properties": {
		"inverted": {
			"description": "If true, the condition will be inverted.",
			"markdownDescription": "If true, the condition will be inverted.",
			"type": "boolean",
			"default": true
		},
		"type": {
			"description": "## Biome Condition Types\n\n---\n\n\nBiome Condition Types operate on a `RegistryEntry<Biome>`, allowing to check if the said entry is in a certain `TagKey<?>`, which in this case, `?` will be `Biome`, and the properties of the biome within the entry. These are only available to the `condition` field of the [Biome (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/biome_condition_types).\n\n---\n\n",
			"markdownDescription": "## Biome Condition Types\n\n---\n\n\nBiome Condition Types operate on a `RegistryEntry<Biome>`, allowing to check if the said entry is in a certain `TagKey<?>`, which in this case, `?` will be `Biome`, and the properties of the biome within the entry. These are only available to the `condition` field of the [Biome (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/biome_condition_types).\n\n---\n\n"
		}
	},
	"allOf": [
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:high_humidity", "origins:high_humidity"]
					}
				}
			},
			"then": {
				"$ref": "biome_condition_types/high_humidity.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:in_tag", "origins:in_tag"]
					}
				}
			},
			"then": {
				"$ref": "biome_condition_types/in_tag.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:precipitation", "origins:precipitation"]
					}
				}
			},
			"then": {
				"$ref": "biome_condition_types/precipitation.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:temperature", "origins:temperature"]
					}
				}
			},
			"then": {
				"$ref": "biome_condition_types/temperature.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:and", "origins:and"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["conditions"],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "All of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## And\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n",
						"markdownDescription": "## And\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: And (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>And</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Checks whether all of the provided conditions are fulfilled.</p>\n<p>Type ID: <code>origins:and</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>conditions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../condition_types.md\">Condition Types</a></td>\n<td></td>\n<td>All of these condition types have to be fulfilled in order for this condition to be fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:and&quot;,\n    &quot;conditions&quot;: [\n        {\n            &quot;type&quot;: &quot;origins:daytime&quot;\n        },\n        {      \n            &quot;type&quot;: &quot;origins:invisible&quot;\n        }\n    ]\n}\n</code></pre>\n<p>This example will check if it is both daytime, and the entity is invisible.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:chance", "origins:chance"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["chance"],
				"properties": {
					"chance": {
						"type": "number",
						"description": "The value to compare the randomly generated number to.",
						"markdownDescription": "The value to compare the randomly generated number to."
					},
					"type": {
						"description": "## Chance\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n",
						"markdownDescription": "## Chance\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Chance (Meta Condition Type)\ndate: 2023-11-19</h2>\n<h1>Chance</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Generates a random number between 0.0 and 1.0 and checks if it&#39;s less than a specified value.</p>\n<p>Type ID: <code>origins:chance</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>chance</code></td>\n<td><a href=\"../data_types/float.md\">Float</a></td>\n<td></td>\n<td>The value to compare the randomly generated number to.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n\t&quot;type&quot;: &quot;origins:chance&quot;,\n\t&quot;chance&quot;: 0.5\n}\n</code></pre>\n<p>This example will evaluate to true 50% of the time.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:constant", "origins:constant"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["value"],
				"properties": {
					"value": {
						"type": "boolean",
						"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
						"markdownDescription": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
					},
					"type": {
						"description": "## Constant\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n",
						"markdownDescription": "## Constant\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Constant (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>Constant</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Provides a constant state where it&#39;s either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.</p>\n<p>Type ID: <code>origins:constant</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>value</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td></td>\n<td>If true, the condition is always fulfilled. If false, the condition is never fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:constant&quot;,\n    &quot;value&quot;: true\n}\n</code></pre>\n<p>This example is always true.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:or", "origins:or"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["conditions"],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## Or\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n",
						"markdownDescription": "## Or\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Or (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>Or</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Checks whether any (one or more) of the provided conditions are fulfilled.</p>\n<p>Type ID: <code>origins:or</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>conditions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../condition_types.md\">Condition Types</a></td>\n<td></td>\n<td>Any of these condition types have to be fulfilled in order for this condition to be fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:or&quot;,\n    &quot;conditions&quot;: [\n        {\n            &quot;type&quot;: &quot;origins:status_effect&quot;,\n            &quot;effect&quot;: &quot;minecraft:poison&quot;\n        },\n        {    \n            &quot;type&quot;: &quot;origins:status_effect&quot;,\n            &quot;effect&quot;: &quot;minecraft:wither&quot;\n        }\n    ]\n}\n</code></pre>\n<p>This example will check if the entity has either the Poison or Wither status effects.</p>\n"
			}
		}
	],
	"x-intellij-html-description": "<hr>\n<h2>title: Biome Condition Types\ndate: 2021-04-05</h2>\n<h1>Biome Condition Types</h1>\n<p>Biome Condition Types operate on a <code>RegistryEntry&lt;Biome&gt;</code>, allowing to check if the said entry is in a certain <code>TagKey&lt;?&gt;</code>, which in this case, <code>?</code> will be <code>Biome</code>, and the properties of the biome within the entry. These are only available to the <code>condition</code> field of the <a href=\"entity_condition_types/biome.md\">Biome (Entity Condition Type)</a>.</p>\n<h3>List</h3>\n<ul>\n<li><a href=\"biome_condition_types/category.md\">Category <span style=\"color:darkred\"><b>(DEPRECATED)</b></span></a></li>\n<li><a href=\"biome_condition_types/high_humidity.md\">High Humidity</a></li>\n<li><a href=\"biome_condition_types/in_tag.md\">In Tag</a></li>\n<li><a href=\"biome_condition_types/precipitation.md\">Precipitation</a></li>\n<li><a href=\"biome_condition_types/temperature.md\">Temperature</a></li>\n</ul>\n"
}
