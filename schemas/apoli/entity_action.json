{
	"type": "object",
	"required": ["type"],
	"allOf": [
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:action_on_set", "origins:action_on_set"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/action_on_set.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:add_velocity", "origins:add_velocity"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/add_velocity.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:add_xp", "origins:add_xp"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/add_xp.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:apply_effect", "origins:apply_effect"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/apply_effect.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:area_of_effect", "origins:area_of_effect"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/area_of_effect.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:block_action_at", "origins:block_action_at"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/block_action_at.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:change_resource", "origins:change_resource"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/change_resource.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:clear_effect", "origins:clear_effect"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/clear_effect.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:crafting_table", "origins:crafting_table"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/crafting_table.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:damage", "origins:damage"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/damage.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:dismount", "origins:dismount"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/dismount.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:drop_inventory", "origins:drop_inventory"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/drop_inventory.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:emit_game_event", "origins:emit_game_event"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/emit_game_event.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:ender_chest", "origins:ender_chest"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/ender_chest.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:equipped_item_action", "origins:equipped_item_action"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/equipped_item_action.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:execute_command", "origins:execute_command"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/execute_command.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:exhaust", "origins:exhaust"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/exhaust.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:explode", "origins:explode"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/explode.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:extinguish", "origins:extinguish"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/extinguish.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:feed", "origins:feed"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/feed.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:fire_projectile", "origins:fire_projectile"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/fire_projectile.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:gain_air", "origins:gain_air"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/gain_air.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:give", "origins:give"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/give.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:grant_advancement", "origins:grant_advancement"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/grant_advancement.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:grant_power", "origins:grant_power"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/grant_power.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:heal", "origins:heal"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/heal.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:modify_death_ticks", "origins:modify_death_ticks"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_death_ticks.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:modify_inventory", "origins:modify_inventory"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_inventory.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:modify_resource", "origins:modify_resource"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_resource.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:modify_stat", "origins:modify_stat"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/modify_stat.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:passenger_action", "origins:passenger_action"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/passenger_action.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:play_sound", "origins:play_sound"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/play_sound.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:random_teleport", "origins:random_teleport"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/random_teleport.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:raycast", "origins:raycast"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/raycast.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:remove_power", "origins:remove_power"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/remove_power.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:replace_inventory", "origins:replace_inventory"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/replace_inventory.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:revoke_advancement", "origins:revoke_advancement"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/revoke_advancement.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:revoke_all_powers", "origins:revoke_all_powers"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/revoke_all_powers.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:revoke_power", "origins:revoke_power"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/revoke_power.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:riding_action", "origins:riding_action"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/riding_action.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:selector_action", "origins:selector_action"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/selector_action.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:set_fall_distance", "origins:set_fall_distance"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/set_fall_distance.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:set_on_fire", "origins:set_on_fire"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/set_on_fire.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:spawn_effect_cloud", "origins:spawn_effect_cloud"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/spawn_effect_cloud.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:spawn_entity", "origins:spawn_entity"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/spawn_entity.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:spawn_particles", "origins:spawn_particles"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/spawn_particles.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:swing_hand", "origins:swing_hand"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/swing_hand.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:toggle", "origins:toggle"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/toggle.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:trigger_cooldown", "origins:trigger_cooldown"]
					}
				}
			},
			"then": {
				"$ref": "entity_action_types/trigger_cooldown.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:and", "origins:and"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["actions"],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "These actions will be executed one after the other (but in the same tick).",
						"markdownDescription": "These actions will be executed one after the other (but in the same tick)."
					},
					"type": {
						"description": "## And\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:and\",\n    \"actions\": [\n        {\n            \"type\": \"origins:exhaust\",\n            \"amount\": 0.5\n        },\n        {    \n            \"type\": \"origins:apply_effect\",\n            \"effect\": {\n            \"effect\": \"minecraft:regeneration\",\n            \"amplifier\": 1,\n            \"duration\": 100\n            }\n        }\n    ]\n}\n```\n\nThis example will apply exhaustion with a value of 0.5 to the player, and apply a Regeneration II status effect that would last for 5 seconds.\n",
						"markdownDescription": "## And\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/and)\n\nExecutes all provided actions in order.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:and\",\n    \"actions\": [\n        {\n            \"type\": \"origins:exhaust\",\n            \"amount\": 0.5\n        },\n        {    \n            \"type\": \"origins:apply_effect\",\n            \"effect\": {\n            \"effect\": \"minecraft:regeneration\",\n            \"amplifier\": 1,\n            \"duration\": 100\n            }\n        }\n    ]\n}\n```\n\nThis example will apply exhaustion with a value of 0.5 to the player, and apply a Regeneration II status effect that would last for 5 seconds.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: And (Meta Action Type)\ndate: 2021-04-06</h2>\n<h1>And</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Executes all provided actions in order.</p>\n<p>Type ID: <code>origins:and</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>actions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../action_types.md\">Action Types</a></td>\n<td></td>\n<td>These actions will be executed one after the other (but in the same tick).</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:and&quot;,\n    &quot;actions&quot;: [\n        {\n            &quot;type&quot;: &quot;origins:exhaust&quot;,\n            &quot;amount&quot;: 0.5\n        },\n        {    \n            &quot;type&quot;: &quot;origins:apply_effect&quot;,\n            &quot;effect&quot;: {\n            &quot;effect&quot;: &quot;minecraft:regeneration&quot;,\n            &quot;amplifier&quot;: 1,\n            &quot;duration&quot;: 100\n            }\n        }\n    ]\n}\n</code></pre>\n<p>This example will apply exhaustion with a value of 0.5 to the player, and apply a Regeneration II status effect that would last for 5 seconds.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:chance", "origins:chance"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["action", "chance"],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which might be executed.",
						"markdownDescription": "The action which might be executed."
					},
					"chance": {
						"type": "number",
						"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
						"markdownDescription": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)."
					},
					"fail_action": {
						"$ref": "#",
						"description": "The action to execute if the specified action in the `action` field is not executed.",
						"markdownDescription": "The action to execute if the specified action in the `action` field is not executed."
					},
					"type": {
						"description": "## Chance\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/chance)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:chance\",\n    \"action\": {\n        \"type\": \"origins:set_on_fire\",\n        \"duration\": 5\n    },\n    \"chance\": 0.4\n}\n```\n\nThis example has a 40% chance to set the entity on fire for 5 seconds.\n",
						"markdownDescription": "## Chance\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/chance)\n\nExecutes the provided action only with a specific chance.\n\nType ID: `origins:chance`\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:chance\",\n    \"action\": {\n        \"type\": \"origins:set_on_fire\",\n        \"duration\": 5\n    },\n    \"chance\": 0.4\n}\n```\n\nThis example has a 40% chance to set the entity on fire for 5 seconds.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Chance (Meta Action Type)\ndate: 2021-04-07</h2>\n<h1>Chance</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Executes the provided action only with a specific chance.</p>\n<p>Type ID: <code>origins:chance</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>action</code></td>\n<td><a href=\"../action_types.md\">Action Type</a></td>\n<td></td>\n<td>The action which might be executed.</td>\n</tr>\n<tr>\n<td><code>chance</code></td>\n<td><a href=\"../data_types/float.md\">Float</a></td>\n<td></td>\n<td>The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).</td>\n</tr>\n<tr>\n<td><code>fail_action</code></td>\n<td><a href=\"../action_types.md\">Action Type</a></td>\n<td><em>optional</em></td>\n<td>The action to execute if the specified action in the <code>action</code> field is not executed.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:chance&quot;,\n    &quot;action&quot;: {\n        &quot;type&quot;: &quot;origins:set_on_fire&quot;,\n        &quot;duration&quot;: 5\n    },\n    &quot;chance&quot;: 0.4\n}\n</code></pre>\n<p>This example has a 40% chance to set the entity on fire for 5 seconds.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:choice", "origins:choice"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["actions"],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": ["element", "weight"],
							"properties": {
								"element": {
									"$ref": "#"
								},
								"weight": {
									"type": "number"
								}
							}
						},
						"description": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice).",
						"markdownDescription": "Each object has to have an `element` [Action](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice) and a `weight` [Integer](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice)."
					},
					"type": {
						"description": "## Choice\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n\n\n---\n\n### 📝 Note\n\nThe chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:choice\",\n    \"actions\": [\n        {\n            \"element\": {\n                \"type\": \"origins:exhaust\",\n                \"amount\": 0.5\n            },\n            \"weight\": 10\n        },\n        {\n            \"element\": {    \n            \"type\": \"origins:apply_effect\",\n                \"effect\": {\n                    \"effect\": \"minecraft:regeneration\",\n                    \"amplifier\": 1,\n                    \"duration\": 100\n                }\n            },\n            \"weight\": 10\n        },\n        {\n            \"element\": {\n                \"type\": \"origins:set_on_fire\",\n                \"duration\": 8\n            },\n            \"weight\": 20\n        }\n    ]\n}\n```\n\nThis example has multiple entity action types with different weights: one with a 25% chance of applying exhaustion with a value of `0.5` to the player, another with a 25% chance of applying a Regeneration II status effect that would last for 5 seconds, and another one with a 50% of setting the entity on fire for 8 seconds.\n",
						"markdownDescription": "## Choice\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/choice)\n\nExecutes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\n\nType ID: `origins:choice`\n\n\n\n---\n\n### 📝 Note\n\nThe chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n\n\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:choice\",\n    \"actions\": [\n        {\n            \"element\": {\n                \"type\": \"origins:exhaust\",\n                \"amount\": 0.5\n            },\n            \"weight\": 10\n        },\n        {\n            \"element\": {    \n            \"type\": \"origins:apply_effect\",\n                \"effect\": {\n                    \"effect\": \"minecraft:regeneration\",\n                    \"amplifier\": 1,\n                    \"duration\": 100\n                }\n            },\n            \"weight\": 10\n        },\n        {\n            \"element\": {\n                \"type\": \"origins:set_on_fire\",\n                \"duration\": 8\n            },\n            \"weight\": 20\n        }\n    ]\n}\n```\n\nThis example has multiple entity action types with different weights: one with a 25% chance of applying exhaustion with a value of `0.5` to the player, another with a 25% chance of applying a Regeneration II status effect that would last for 5 seconds, and another one with a 50% of setting the entity on fire for 8 seconds.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Choice (Meta Action Type)\ndate: 2021-04-07</h2>\n<h1>Choice</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.</p>\n<p>Type ID: <code>origins:choice</code></p>\n<p>!!! note</p>\n<pre><code>The chance of the object is determined by dividing the weight of the object to the sum of all weights of all the objects (`weight / sumOfAllWeights = chance`).\n</code></pre>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>actions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../data_types/object.md\">Objects</a></td>\n<td></td>\n<td>Each object has to have an <code>element</code> <a href=\"../action_types.md\">Action</a> and a <code>weight</code> <a href=\"../data_types/integer.md\">Integer</a>.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:choice&quot;,\n    &quot;actions&quot;: [\n        {\n            &quot;element&quot;: {\n                &quot;type&quot;: &quot;origins:exhaust&quot;,\n                &quot;amount&quot;: 0.5\n            },\n            &quot;weight&quot;: 10\n        },\n        {\n            &quot;element&quot;: {    \n            &quot;type&quot;: &quot;origins:apply_effect&quot;,\n                &quot;effect&quot;: {\n                    &quot;effect&quot;: &quot;minecraft:regeneration&quot;,\n                    &quot;amplifier&quot;: 1,\n                    &quot;duration&quot;: 100\n                }\n            },\n            &quot;weight&quot;: 10\n        },\n        {\n            &quot;element&quot;: {\n                &quot;type&quot;: &quot;origins:set_on_fire&quot;,\n                &quot;duration&quot;: 8\n            },\n            &quot;weight&quot;: 20\n        }\n    ]\n}\n</code></pre>\n<p>This example has multiple entity action types with different weights: one with a 25% chance of applying exhaustion with a value of <code>0.5</code> to the player, another with a 25% chance of applying a Regeneration II status effect that would last for 5 seconds, and another one with a 50% of setting the entity on fire for 8 seconds.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:delay", "origins:delay"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["action", "ticks"],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which will be executed after the delay.",
						"markdownDescription": "The action which will be executed after the delay."
					},
					"ticks": {
						"type": "integer",
						"description": "The amount of ticks until the action is executed.",
						"markdownDescription": "The amount of ticks until the action is executed."
					},
					"type": {
						"description": "## Delay\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n\n\n---\n\n### ⚠️ Caution\n\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such a task.\n\n\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:delay\",\n    \"ticks\": 20,\n    \"action\": {\n        \"type\": \"origins:apply_effect\",\n        \"effect\": {\n            \"effect\": \"minecraft:speed\",\n            \"amplifier\": 1,\n            \"duration\": 80\n        }\n    }\n}\n```\nThis example will apply a Speed II status effect after 1 second.\n",
						"markdownDescription": "## Delay\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay)\n\nExecutes the provided action after a set amount of ticks.\n\nType ID: `origins:delay`\n\n\n\n---\n\n### ⚠️ Caution\n\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such a task.\n\n\n\n    If you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and trigger that power with the [Trigger Cooldown (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n    You can then use another power that would use the [Action Over Time (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) and check if the value of the power that would use the [Cooldown (Power Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay) is `\"==\"` to `0` using the [Resource (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/delay).\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:delay\",\n    \"ticks\": 20,\n    \"action\": {\n        \"type\": \"origins:apply_effect\",\n        \"effect\": {\n            \"effect\": \"minecraft:speed\",\n            \"amplifier\": 1,\n            \"duration\": 80\n        }\n    }\n}\n```\nThis example will apply a Speed II status effect after 1 second.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Delay (Meta Action Type)\ndate: 2021-04-07</h2>\n<h1>Delay</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Executes the provided action after a set amount of ticks.</p>\n<p>Type ID: <code>origins:delay</code></p>\n<p>!!! caution</p>\n<pre><code>Delaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such a task.\n\nIf you want to delay an action type *reliably,* you can use a power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) and trigger that power with the [Trigger Cooldown (Entity Action Type)](../entity_action_types/trigger_cooldown.md).\n\nYou can then use another power that would use the [Action Over Time (Power Type)](../power_types/action_over_time.md) and check if the value of the power that would use the [Cooldown (Power Type)](../power_types/cooldown.md) is `&quot;==&quot;` to `0` using the [Resource (Entity Condition Type)](../entity_condition_types/resource.md).\n</code></pre>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>action</code></td>\n<td><a href=\"../action_types.md\">Action Type</a></td>\n<td></td>\n<td>The action which will be executed after the delay.</td>\n</tr>\n<tr>\n<td><code>ticks</code></td>\n<td><a href=\"../data_types/integer.md\">Integer</a></td>\n<td></td>\n<td>The amount of ticks until the action is executed.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:delay&quot;,\n    &quot;ticks&quot;: 20,\n    &quot;action&quot;: {\n        &quot;type&quot;: &quot;origins:apply_effect&quot;,\n        &quot;effect&quot;: {\n            &quot;effect&quot;: &quot;minecraft:speed&quot;,\n            &quot;amplifier&quot;: 1,\n            &quot;duration&quot;: 80\n        }\n    }\n}\n</code></pre>\n<p>This example will apply a Speed II status effect after 1 second.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:if_else", "origins:if_else"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["condition", "if_action"],
				"properties": {
					"condition": {
						"$ref": "entity_condition.json",
						"description": "A condition based on the type of action.",
						"markdownDescription": "A condition based on the type of action."
					},
					"if_action": {
						"$ref": "#",
						"description": "The action which is executed when the condition evaluates to true.",
						"markdownDescription": "The action which is executed when the condition evaluates to true."
					},
					"else_action": {
						"$ref": "#",
						"description": "If present, this action will be executed when the condition evaluates to false.",
						"markdownDescription": "If present, this action will be executed when the condition evaluates to false."
					},
					"type": {
						"description": "## If-Else\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n\n\n---\n\n### 📝 Note\n\nDepending on the condition type, a different action type is expected:\n\n\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:if_else\",\n    \"condition\": {\n        \"type\": \"origins:fall_flying\"\n    },\n    \"if_action\": {\n        \"type\": \"origins:set_on_fire\",\n        \"duration\": 5\n    },\n    \"else_action\": {\n        \"type\": \"origins:heal\",\n        \"amount\": 6\n    }\n}\n```\n\nThis example will set the entity on fire for 5 seconds if they are \"fall flying\". Otherwise, it will restore 3 hearts of health to the entity instead.\n",
						"markdownDescription": "## If-Else\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\nExecutes an action only if a condition holds, and optionally executes another action when it doesn't hold.\n\nType ID: `origins:if_else`\n\n\n\n---\n\n### 📝 Note\n\nDepending on the condition type, a different action type is expected:\n\n\n\n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else)\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:if_else\",\n    \"condition\": {\n        \"type\": \"origins:fall_flying\"\n    },\n    \"if_action\": {\n        \"type\": \"origins:set_on_fire\",\n        \"duration\": 5\n    },\n    \"else_action\": {\n        \"type\": \"origins:heal\",\n        \"amount\": 6\n    }\n}\n```\n\nThis example will set the entity on fire for 5 seconds if they are \"fall flying\". Otherwise, it will restore 3 hearts of health to the entity instead.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: If-Else (Meta Action Type)\ndate: 2021-04-07</h2>\n<h1>If-Else</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Executes an action only if a condition holds, and optionally executes another action when it doesn&#39;t hold.</p>\n<p>Type ID: <code>origins:if_else</code></p>\n<p>!!! note</p>\n<pre><code>Depending on the condition type, a different action type is expected:\n\nAction Type | Condition Type\n------------|----------------\n[Bi-entity Action Type](../bientity_action_types.md) | [Bi-entity Condition Type](../bientity_condition_types.md)\n[Entity Action Type](../entity_action_types.md) | [Entity Condition Type](../entity_condition_types.md)\n[Block Action Type](../block_action_types.md) | [Block Condition Type](../block_condition_types.md)\n[Item Action Type](../item_action_types.md) | [Item Condition Type](../item_condition_types.md)\n</code></pre>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>condition</code></td>\n<td><a href=\"../condition_types.md\">Condition Type</a></td>\n<td></td>\n<td>A condition based on the type of action.</td>\n</tr>\n<tr>\n<td><code>if_action</code></td>\n<td><a href=\"../action_types.md\">Action Type</a></td>\n<td></td>\n<td>The action which is executed when the condition evaluates to true.</td>\n</tr>\n<tr>\n<td><code>else_action</code></td>\n<td><a href=\"../action_types.md\">Action Type</a></td>\n<td><em>optional</em></td>\n<td>If present, this action will be executed when the condition evaluates to false.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:if_else&quot;,\n    &quot;condition&quot;: {\n        &quot;type&quot;: &quot;origins:fall_flying&quot;\n    },\n    &quot;if_action&quot;: {\n        &quot;type&quot;: &quot;origins:set_on_fire&quot;,\n        &quot;duration&quot;: 5\n    },\n    &quot;else_action&quot;: {\n        &quot;type&quot;: &quot;origins:heal&quot;,\n        &quot;amount&quot;: 6\n    }\n}\n</code></pre>\n<p>This example will set the entity on fire for 5 seconds if they are &quot;fall flying&quot;. Otherwise, it will restore 3 hearts of health to the entity instead.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:if_else_list", "origins:if_else_list"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["actions"],
				"properties": {
					"actions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": ["action", "condition"],
							"properties": {
								"action": {
									"$ref": "#"
								},
								"condition": {
									"$ref": "entity_condition.json"
								}
							}
						},
						"description": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object.",
						"markdownDescription": "Each object has to have an `action` [Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object and a `condition` [Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) object."
					},
					"type": {
						"description": "## If-Else List\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list).\n\nType ID: `origins:if_else_list`\n\n\n\n---\n\n### 📝 Note\n\nDepending on the condition type, a different action type is expected:\n\n\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n\t\"type\": \"origins:if_else_list\",\n\t\"actions\": [\n\t\t{\n\t\t\t\"condition\": {\n\t\t\t\t\"type\": \"origins:health\",\n\t\t\t\t\"comparison\": \"<=\",\n\t\t\t\t\"compare_to\": 6\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\t\"type\": \"origins:apply_effect\",\n\t\t\t\t\"effect\": {\n\t\t\t\t\t\"effect\": \"minecraft:speed\",\n\t\t\t\t\t\"amplifier\": 2,\n\t\t\t\t\t\"duration\": 80\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"condition\": {\n\t\t\t\t\"type\": \"origins:health\",\n\t\t\t\t\"comparison\": \"<=\",\n\t\t\t\t\"compare_to\": 12\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\t\"type\": \"origins:apply_effect\",\n\t\t\t\t\"effect\": {\n\t\t\t\t\t\"effect\": \"minecraft:speed\",\n\t\t\t\t\t\"amplifier\": 1,\n\t\t\t\t\t\"duration\": 80\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"condition\": {\n\t\t\t\t\"type\": \"origins:health\",\n\t\t\t\t\"comparison\": \"<=\",\n\t\t\t\t\"compare_to\": 18\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\t\"type\": \"origins:apply_effect\",\n\t\t\t\t\"effect\": {\n\t\t\t\t\t\"effect\": \"minecraft:speed\",\n\t\t\t\t\t\"amplifier\": 0,\n\t\t\t\t\t\"duration\": 80\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\nThis example will apply a stronger Speed status effect the lower the entity's health is, in three stages (<= 3 hearts, <= 6 hearts or <= 9 hearts).\n",
						"markdownDescription": "## If-Else List\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\nChecks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested [If-Else (Meta Action Type)](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list).\n\nType ID: `origins:if_else_list`\n\n\n\n---\n\n### 📝 Note\n\nDepending on the condition type, a different action type is expected:\n\n\n    \n    Action Type | Condition Type\n    ------------|----------------\n    [Bi-entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Bi-entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Entity Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Entity Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Block Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Block Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n    [Item Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list) | [Item Condition Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list)\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n\t\"type\": \"origins:if_else_list\",\n\t\"actions\": [\n\t\t{\n\t\t\t\"condition\": {\n\t\t\t\t\"type\": \"origins:health\",\n\t\t\t\t\"comparison\": \"<=\",\n\t\t\t\t\"compare_to\": 6\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\t\"type\": \"origins:apply_effect\",\n\t\t\t\t\"effect\": {\n\t\t\t\t\t\"effect\": \"minecraft:speed\",\n\t\t\t\t\t\"amplifier\": 2,\n\t\t\t\t\t\"duration\": 80\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"condition\": {\n\t\t\t\t\"type\": \"origins:health\",\n\t\t\t\t\"comparison\": \"<=\",\n\t\t\t\t\"compare_to\": 12\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\t\"type\": \"origins:apply_effect\",\n\t\t\t\t\"effect\": {\n\t\t\t\t\t\"effect\": \"minecraft:speed\",\n\t\t\t\t\t\"amplifier\": 1,\n\t\t\t\t\t\"duration\": 80\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"condition\": {\n\t\t\t\t\"type\": \"origins:health\",\n\t\t\t\t\"comparison\": \"<=\",\n\t\t\t\t\"compare_to\": 18\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\t\"type\": \"origins:apply_effect\",\n\t\t\t\t\"effect\": {\n\t\t\t\t\t\"effect\": \"minecraft:speed\",\n\t\t\t\t\t\"amplifier\": 0,\n\t\t\t\t\t\"duration\": 80\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\nThis example will apply a stronger Speed status effect the lower the entity's health is, in three stages (<= 3 hearts, <= 6 hearts or <= 9 hearts).\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: If-Else List (Meta Action Type)\ndate: 2021-04-07</h2>\n<h1>If-Else List</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested <a href=\"if_else.md\">If-Else (Meta Action Type)</a>.</p>\n<p>Type ID: <code>origins:if_else_list</code></p>\n<p>!!! note</p>\n<pre><code>Depending on the condition type, a different action type is expected:\n\nAction Type | Condition Type\n------------|----------------\n[Bi-entity Action Type](../bientity_action_types.md) | [Bi-entity Condition Type](../bientity_condition_types.md)\n[Entity Action Type](../entity_action_types.md) | [Entity Condition Type](../entity_condition_types.md)\n[Block Action Type](../block_action_types.md) | [Block Condition Type](../block_condition_types.md)\n[Item Action Type](../item_action_types.md) | [Item Condition Type](../item_condition_types.md)\n</code></pre>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>actions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../data_types/object.md\">Objects</a></td>\n<td></td>\n<td>Each object has to have an <code>action</code> <a href=\"../action_types.md\">Action Type</a> object and a <code>condition</code> <a href=\"../condition_types.md\">Condition Type</a> object.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n\t&quot;type&quot;: &quot;origins:if_else_list&quot;,\n\t&quot;actions&quot;: [\n\t\t{\n\t\t\t&quot;condition&quot;: {\n\t\t\t\t&quot;type&quot;: &quot;origins:health&quot;,\n\t\t\t\t&quot;comparison&quot;: &quot;&lt;=&quot;,\n\t\t\t\t&quot;compare_to&quot;: 6\n\t\t\t},\n\t\t\t&quot;action&quot;: {\n\t\t\t\t&quot;type&quot;: &quot;origins:apply_effect&quot;,\n\t\t\t\t&quot;effect&quot;: {\n\t\t\t\t\t&quot;effect&quot;: &quot;minecraft:speed&quot;,\n\t\t\t\t\t&quot;amplifier&quot;: 2,\n\t\t\t\t\t&quot;duration&quot;: 80\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t&quot;condition&quot;: {\n\t\t\t\t&quot;type&quot;: &quot;origins:health&quot;,\n\t\t\t\t&quot;comparison&quot;: &quot;&lt;=&quot;,\n\t\t\t\t&quot;compare_to&quot;: 12\n\t\t\t},\n\t\t\t&quot;action&quot;: {\n\t\t\t\t&quot;type&quot;: &quot;origins:apply_effect&quot;,\n\t\t\t\t&quot;effect&quot;: {\n\t\t\t\t\t&quot;effect&quot;: &quot;minecraft:speed&quot;,\n\t\t\t\t\t&quot;amplifier&quot;: 1,\n\t\t\t\t\t&quot;duration&quot;: 80\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t&quot;condition&quot;: {\n\t\t\t\t&quot;type&quot;: &quot;origins:health&quot;,\n\t\t\t\t&quot;comparison&quot;: &quot;&lt;=&quot;,\n\t\t\t\t&quot;compare_to&quot;: 18\n\t\t\t},\n\t\t\t&quot;action&quot;: {\n\t\t\t\t&quot;type&quot;: &quot;origins:apply_effect&quot;,\n\t\t\t\t&quot;effect&quot;: {\n\t\t\t\t\t&quot;effect&quot;: &quot;minecraft:speed&quot;,\n\t\t\t\t\t&quot;amplifier&quot;: 0,\n\t\t\t\t\t&quot;duration&quot;: 80\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n</code></pre>\n<p>This example will apply a stronger Speed status effect the lower the entity&#39;s health is, in three stages (&lt;= 3 hearts, &lt;= 6 hearts or &lt;= 9 hearts).</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:nothing", "origins:nothing"]
					}
				}
			},
			"then": {
				"type": "object",
				"properties": {
					"type": {
						"description": "## Nothing\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/nothing)\n\nDoes nothing. Can be used as a backup in case an action is not optional in some place.\n\nType ID: `origins:nothing`\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:nothing\"\n}\n```\n\nThis example does... nothing.\n<br>\n\n```json\n\"bientity_action\": {\n    \"type\": \"origins:nothing\"\n}\n```\n\nThis example... also does nothing.\n",
						"markdownDescription": "## Nothing\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/nothing)\n\nDoes nothing. Can be used as a backup in case an action is not optional in some place.\n\nType ID: `origins:nothing`\n\n---\n\n### Examples\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:nothing\"\n}\n```\n\nThis example does... nothing.\n<br>\n\n```json\n\"bientity_action\": {\n    \"type\": \"origins:nothing\"\n}\n```\n\nThis example... also does nothing.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Nothing (Meta Action Type)\ndate: 2021-10-13</h2>\n<h1>Nothing</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Does nothing. Can be used as a backup in case an action is not optional in some place.</p>\n<p>Type ID: <code>origins:nothing</code></p>\n<h3>Fields</h3>\n<p><em>None.</em></p>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:nothing&quot;\n}\n</code></pre>\n<p>This example does... nothing.\n<br></p>\n<pre><code class=\"language-json\">&quot;bientity_action&quot;: {\n    &quot;type&quot;: &quot;origins:nothing&quot;\n}\n</code></pre>\n<p>This example... also does nothing.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:side", "origins:side"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["action", "side"],
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action to execute.",
						"markdownDescription": "The action to execute."
					},
					"side": {
						"$ref": "types/side.json",
						"description": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`",
						"markdownDescription": "Determines where to execute the specified action type. Accepts `\"client\"` or `\"server\"`"
					},
					"type": {
						"description": "## Side\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n---\n\n### Examples\n\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:side\",\n    \"action\": {\n        \"type\": \"origins:change_resource\",\n        \"resource\": \"example:resource\",\n        \"change\": 1\n    },\n    \"side\": \"client\"\n}\n```\n\nThis example will add 1 to the `example:resource` power on the client-side.\n",
						"markdownDescription": "## Side\n\n---\n\n\n[Meta Action Type](https://origins.readthedocs.io/en/latest/types/meta_action_types/side)\n\nExecutes the specified action type on the specified \"side\".\n\n---\n\n### Examples\n\n\n```json\n\"entity_action\": {\n    \"type\": \"origins:side\",\n    \"action\": {\n        \"type\": \"origins:change_resource\",\n        \"resource\": \"example:resource\",\n        \"change\": 1\n    },\n    \"side\": \"client\"\n}\n```\n\nThis example will add 1 to the `example:resource` power on the client-side.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Side (Meta Action Type)\ndate: 2022-06-15</h2>\n<h1>Side</h1>\n<p><a href=\"../meta_action_types.md\">Meta Action Type</a></p>\n<p>Executes the specified action type on the specified &quot;side&quot;.</p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>action</code></td>\n<td><a href=\"../action_types.md\">Action Type</a></td>\n<td></td>\n<td>The action to execute.</td>\n</tr>\n<tr>\n<td><code>side</code></td>\n<td><a href=\"../data_types/string.md\">String</a></td>\n<td></td>\n<td>Determines where to execute the specified action type. Accepts <code>&quot;client&quot;</code> or <code>&quot;server&quot;</code></td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;entity_action&quot;: {\n    &quot;type&quot;: &quot;origins:side&quot;,\n    &quot;action&quot;: {\n        &quot;type&quot;: &quot;origins:change_resource&quot;,\n        &quot;resource&quot;: &quot;example:resource&quot;,\n        &quot;change&quot;: 1\n    },\n    &quot;side&quot;: &quot;client&quot;\n}\n</code></pre>\n<p>This example will add 1 to the <code>example:resource</code> power on the client-side.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:add_velocity"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/add_velocity.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:custom_projectile"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/custom_projectile.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:explode"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/explode.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:explosion_raycast"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/explosion_raycast.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:fire_projectile"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/fire_projectile.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:item_cooldown"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/item_cooldown.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:raycast"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/raycast.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:resource_transfer"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/resource_transfer.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:set_no_gravity"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/set_no_gravity.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:spawn_custom_effect_cloud"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/spawn_custom_effect_cloud.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:spawn_item"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/spawn_item.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:spawn_particles"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/spawn_particles.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:zombify_villager"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_action_types/zombify_villager.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "epoli:save_location"
					}
				}
			},
			"then": {
				"$ref": "../epoli/entityactions/save_location.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "epoli:system_toast"
					}
				}
			},
			"then": {
				"$ref": "../epoli/entityactions/system_toast.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "epoli:teleport"
					}
				}
			},
			"then": {
				"$ref": "../epoli/entityactions/teleport.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "epoli:teleport_location"
					}
				}
			},
			"then": {
				"$ref": "../epoli/entityactions/teleport_location.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "epoli:teleport_to_spawn"
					}
				}
			},
			"then": {
				"$ref": "../epoli/entityactions/teleport_to_spawn.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "skillful:add_skill_points"
					}
				}
			},
			"then": {
				"$ref": "../skillful/entity_actions/add_skill_points.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:consume_dye"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/consume_dye.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:damage_equipment"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/damage_equipment.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:jump"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/jump.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:resource_math"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/resource_math.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:set_dyeable_model_color"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/set_dyeable_model_color.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:set_freeze_ticks"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/set_freeze_ticks.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:set_item_cooldown"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/set_item_cooldown.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:show_floating_item"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/show_floating_item.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:summon_fangs"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/summon_fangs.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:summon_slime"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_action_types/summon_slime.json"
			}
		}
	],
	"properties": {
		"type": {
			"description": "## Entity Action Types\n\n---\n\n\nEntity Action Types operate on an `Entity`. Some more specific actions only have an effect on more specific entity types (e.g. [Exhaust (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/entity_action_types) only works on a `PlayerEntity`, as other entities do not have a hunger bar). These are available to power/action types that provides a `entity_action` object field.\n\n---\n\n",
			"markdownDescription": "## Entity Action Types\n\n---\n\n\nEntity Action Types operate on an `Entity`. Some more specific actions only have an effect on more specific entity types (e.g. [Exhaust (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/entity_action_types) only works on a `PlayerEntity`, as other entities do not have a hunger bar). These are available to power/action types that provides a `entity_action` object field.\n\n---\n\n"
		}
	},
	"x-intellij-html-description": "<hr>\n<h2>title: Entity Action Types\ndate: 2021-04-05</h2>\n<h1>Entity Action Types</h1>\n<p>Entity Action Types operate on an <code>Entity</code>. Some more specific actions only have an effect on more specific entity types (e.g. <a href=\"entity_action_types/exhaust.md\">Exhaust (Entity Action Type)</a> only works on a <code>PlayerEntity</code>, as other entities do not have a hunger bar). These are available to power/action types that provides a <code>entity_action</code> object field.</p>\n<h3>List</h3>\n<ul>\n<li><a href=\"entity_action_types/action_on_set.md\">Action on Set</a></li>\n<li><a href=\"entity_action_types/add_velocity.md\">Add Velocity</a></li>\n<li><a href=\"entity_action_types/add_xp.md\">Add XP</a></li>\n<li><a href=\"entity_action_types/apply_effect.md\">Apply Effect</a></li>\n<li><a href=\"entity_action_types/area_of_effect.md\">Area of Effect</a></li>\n<li><a href=\"entity_action_types/block_action_at.md\">Block Action At</a></li>\n<li><a href=\"entity_action_types/change_resource.md\">Change Resource</a></li>\n<li><a href=\"entity_action_types/clear_effect.md\">Clear Effect</a></li>\n<li><a href=\"entity_action_types/crafting_table.md\">Crafting Table</a></li>\n<li><a href=\"entity_action_types/damage.md\">Damage</a></li>\n<li><a href=\"entity_action_types/dismount.md\">Dismount</a></li>\n<li><a href=\"entity_action_types/drop_inventory.md\">Drop Inventory</a></li>\n<li><a href=\"entity_action_types/emit_game_event.md\">Emit Game Event</a></li>\n<li><a href=\"entity_action_types/ender_chest.md\">Ender Chest</a></li>\n<li><a href=\"entity_action_types/equipped_item_action.md\">Equipped Item Action</a></li>\n<li><a href=\"entity_action_types/execute_command.md\">Execute Command</a></li>\n<li><a href=\"entity_action_types/exhaust.md\">Exhaust (Action)</a></li>\n<li><a href=\"entity_action_types/explode.md\">Explode</a></li>\n<li><a href=\"entity_action_types/extinguish.md\">Extinguish</a></li>\n<li><a href=\"entity_action_types/feed.md\">Feed</a></li>\n<li><a href=\"entity_action_types/fire_projectile.md\">Fire Projectile</a></li>\n<li><a href=\"entity_action_types/gain_air.md\">Gain Air</a></li>\n<li><a href=\"entity_action_types/give.md\">Give</a></li>\n<li><a href=\"entity_action_types/grant_advancement.md\">Grant Advancement</a></li>\n<li><a href=\"entity_action_types/grant_power.md\">Grant Power</a></li>\n<li><a href=\"entity_action_types/heal.md\">Heal</a></li>\n<li><a href=\"entity_action_types/modify_death_ticks.md\">Modify Death Ticks</a></li>\n<li><a href=\"entity_action_types/modify_inventory.md\">Modify Inventory</a></li>\n<li><a href=\"entity_action_types/modify_resource.md\">Modify Resource</a></li>\n<li><a href=\"entity_action_types/modify_stat.md\">Modify Stat</a></li>\n<li><a href=\"entity_action_types/passenger_action.md\">Passenger Action</a></li>\n<li><a href=\"entity_action_types/play_sound.md\">Play Sound</a></li>\n<li><a href=\"entity_action_types/random_teleport.md\">Random Teleport</a></li>\n<li><a href=\"entity_action_types/raycast.md\">Raycast</a></li>\n<li><a href=\"entity_action_types/remove_power.md\">Remove Power</a></li>\n<li><a href=\"entity_action_types/replace_inventory.md\">Replace Inventory</a></li>\n<li><a href=\"entity_action_types/revoke_advancement.md\">Revoke Advancement</a></li>\n<li><a href=\"entity_action_types/revoke_all_powers.md\">Revoke All Powers</a></li>\n<li><a href=\"entity_action_types/revoke_power.md\">Revoke Power</a></li>\n<li><a href=\"entity_action_types/riding_action.md\">Riding Action</a></li>\n<li><a href=\"entity_action_types/selector_action.md\">Selector Action</a></li>\n<li><a href=\"entity_action_types/set_fall_distance.md\">Set Fall Distance</a></li>\n<li><a href=\"entity_action_types/set_on_fire.md\">Set On Fire</a></li>\n<li><a href=\"entity_action_types/spawn_effect_cloud.md\">Spawn Effect Cloud</a></li>\n<li><a href=\"entity_action_types/spawn_entity.md\">Spawn Entity</a></li>\n<li><a href=\"entity_action_types/spawn_particles.md\">Spawn Particles</a></li>\n<li><a href=\"entity_action_types/swing_hand.md\">Swing Hand</a></li>\n<li><a href=\"entity_action_types/toggle.md\">Toggle</a></li>\n<li><a href=\"entity_action_types/trigger_cooldown.md\">Trigger Cooldown</a></li>\n</ul>\n"
}
