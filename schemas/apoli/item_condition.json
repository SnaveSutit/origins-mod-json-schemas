{
	"type": "object",
	"required": ["type"],
	"properties": {
		"inverted": {
			"description": "If true, the condition will be inverted.",
			"markdownDescription": "If true, the condition will be inverted.",
			"type": "boolean",
			"default": true
		},
		"type": {
			"description": "## Item Condition Types\n\n---\n\n\nItem Condition Types operate on a combination of `World` and `ItemStack`, allowing to evaluate not only the stack of items, but also access the world for certain things, like accessing the recipe manager of the world (which is used by the [Smeltable (Item Condition Type)](https://origins.readthedocs.io/en/latest/types/item_condition_types)).\n\n---\n\n",
			"markdownDescription": "## Item Condition Types\n\n---\n\n\nItem Condition Types operate on a combination of `World` and `ItemStack`, allowing to evaluate not only the stack of items, but also access the world for certain things, like accessing the recipe manager of the world (which is used by the [Smeltable (Item Condition Type)](https://origins.readthedocs.io/en/latest/types/item_condition_types)).\n\n---\n\n"
		}
	},
	"allOf": [
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:amount", "origins:amount"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/amount.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:armor_value", "origins:armor_value"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/armor_value.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:durability", "origins:durability"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/durability.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:empty", "origins:empty"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/empty.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:enchantable", "origins:enchantable"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/enchantable.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:enchantment", "origins:enchantment"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/enchantment.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:fireproof", "origins:fireproof"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/fireproof.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:food", "origins:food"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/food.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:fuel", "origins:fuel"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/fuel.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:harvest_level", "origins:harvest_level"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/harvest_level.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:has_power", "origins:has_power"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/has_power.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:ingredient", "origins:ingredient"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/ingredient.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:is_damageable", "origins:is_damageable"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/is_damageable.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:is_equippable", "origins:is_equippable"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/is_equippable.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:meat", "origins:meat"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/meat.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:nbt", "origins:nbt"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/nbt.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:power_count", "origins:power_count"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/power_count.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:relative_durability", "origins:relative_durability"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/relative_durability.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:smeltable", "origins:smeltable"]
					}
				}
			},
			"then": {
				"$ref": "item_condition_types/smeltable.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:and", "origins:and"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["conditions"],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "All of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## And\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n",
						"markdownDescription": "## And\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: And (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>And</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Checks whether all of the provided conditions are fulfilled.</p>\n<p>Type ID: <code>origins:and</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>conditions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../condition_types.md\">Condition Types</a></td>\n<td></td>\n<td>All of these condition types have to be fulfilled in order for this condition to be fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:and&quot;,\n    &quot;conditions&quot;: [\n        {\n            &quot;type&quot;: &quot;origins:daytime&quot;\n        },\n        {      \n            &quot;type&quot;: &quot;origins:invisible&quot;\n        }\n    ]\n}\n</code></pre>\n<p>This example will check if it is both daytime, and the entity is invisible.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:chance", "origins:chance"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["chance"],
				"properties": {
					"chance": {
						"type": "number",
						"description": "The value to compare the randomly generated number to.",
						"markdownDescription": "The value to compare the randomly generated number to."
					},
					"type": {
						"description": "## Chance\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n",
						"markdownDescription": "## Chance\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Chance (Meta Condition Type)\ndate: 2023-11-19</h2>\n<h1>Chance</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Generates a random number between 0.0 and 1.0 and checks if it&#39;s less than a specified value.</p>\n<p>Type ID: <code>origins:chance</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>chance</code></td>\n<td><a href=\"../data_types/float.md\">Float</a></td>\n<td></td>\n<td>The value to compare the randomly generated number to.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n\t&quot;type&quot;: &quot;origins:chance&quot;,\n\t&quot;chance&quot;: 0.5\n}\n</code></pre>\n<p>This example will evaluate to true 50% of the time.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:constant", "origins:constant"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["value"],
				"properties": {
					"value": {
						"type": "boolean",
						"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
						"markdownDescription": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
					},
					"type": {
						"description": "## Constant\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n",
						"markdownDescription": "## Constant\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Constant (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>Constant</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Provides a constant state where it&#39;s either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.</p>\n<p>Type ID: <code>origins:constant</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>value</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td></td>\n<td>If true, the condition is always fulfilled. If false, the condition is never fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:constant&quot;,\n    &quot;value&quot;: true\n}\n</code></pre>\n<p>This example is always true.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:or", "origins:or"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["conditions"],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## Or\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n",
						"markdownDescription": "## Or\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Or (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>Or</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Checks whether any (one or more) of the provided conditions are fulfilled.</p>\n<p>Type ID: <code>origins:or</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>conditions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../condition_types.md\">Condition Types</a></td>\n<td></td>\n<td>Any of these condition types have to be fulfilled in order for this condition to be fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:or&quot;,\n    &quot;conditions&quot;: [\n        {\n            &quot;type&quot;: &quot;origins:status_effect&quot;,\n            &quot;effect&quot;: &quot;minecraft:poison&quot;\n        },\n        {    \n            &quot;type&quot;: &quot;origins:status_effect&quot;,\n            &quot;effect&quot;: &quot;minecraft:wither&quot;\n        }\n    ]\n}\n</code></pre>\n<p>This example will check if the entity has either the Poison or Wither status effects.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:base_enchantment"
					}
				}
			},
			"then": {
				"$ref": "../apugli/item_condition_types/base_enchantment.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:on_cooldown"
					}
				}
			},
			"then": {
				"$ref": "../apugli/item_condition_types/on_cooldown.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:is_dye"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/item_condition_types/is_dye.json"
			}
		}
	],
	"x-intellij-html-description": "<hr>\n<h2>title: Item Condition Types\ndate: 2021-04-05</h2>\n<h1>Item Condition Types</h1>\n<p>Item Condition Types operate on a combination of <code>World</code> and <code>ItemStack</code>, allowing to evaluate not only the stack of items, but also access the world for certain things, like accessing the recipe manager of the world (which is used by the <a href=\"item_condition_types/smeltable.md\">Smeltable (Item Condition Type)</a>).</p>\n<h3>List</h3>\n<ul>\n<li><a href=\"item_condition_types/amount.md\">Amount</a></li>\n<li><a href=\"item_condition_types/armor_value.md\">Armor Value</a></li>\n<li><a href=\"item_condition_types/durability.md\">Durability</a></li>\n<li><a href=\"item_condition_types/empty.md\">Empty</a></li>\n<li><a href=\"item_condition_types/enchantable.md\">Enchantable</a></li>\n<li><a href=\"item_condition_types/enchantment.md\">Enchantment</a></li>\n<li><a href=\"item_condition_types/fireproof.md\">Fireproof</a></li>\n<li><a href=\"item_condition_types/food.md\">Food</a></li>\n<li><a href=\"item_condition_types/fuel.md\">Fuel</a></li>\n<li><a href=\"item_condition_types/harvest_level.md\">Harvest Level</a></li>\n<li><a href=\"item_condition_types/has_power.md\">Has Power</a></li>\n<li><a href=\"item_condition_types/ingredient.md\">Ingredient</a></li>\n<li><a href=\"item_condition_types/is_damageable.md\">Is Damageable</a></li>\n<li><a href=\"item_condition_types/is_equippable.md\">Is Equippable</a></li>\n<li><a href=\"item_condition_types/meat.md\">Meat</a></li>\n<li><a href=\"item_condition_types/nbt.md\">NBT</a></li>\n<li><a href=\"item_condition_types/power_count.md\">Power Count</a></li>\n<li><a href=\"item_condition_types/relative_durability.md\">Relative Durability</a></li>\n<li><a href=\"item_condition_types/smeltable.md\">Smeltable</a></li>\n</ul>\n"
}
