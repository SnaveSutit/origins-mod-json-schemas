{
	"type": "object",
	"properties": {
		"active_by_default": {
			"type": "boolean",
			"default": true,
			"description": "Determines whether the state of this power type should be ON by default.",
			"markdownDescription": "Determines whether the state of this power type should be ON by default."
		},
		"key": {
			"$ref": "../types/key.json",
			"description": "Which active key this power should respond to.",
			"markdownDescription": "Which active key this power should respond to."
		},
		"retain_state": {
			"type": "boolean",
			"default": true,
			"description": "Determines whether the power remains active even if the specified condition (if any) is no longer met. If set to `true`, the power will stay in its current state regardless of the condition. If set to `false`, the power will deactivate when the condition is not fulfilled.",
			"markdownDescription": "Determines whether the power remains active even if the specified condition (if any) is no longer met. If set to `true`, the power will stay in its current state regardless of the condition. If set to `false`, the power will deactivate when the condition is not fulfilled."
		},
		"type": {
			"description": "## Toggle\n\n---\n\n\n[Power Type](https://origins.readthedocs.io/en/latest/types/power_types/toggle)\n\nProvides a state that can be toggled with the specified [Key](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\nType ID: `origins:toggle`\n\n\n\n\n---\n\n### üìù Note\n\nThis power type provides a state that can be toggled with the [Toggle (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle) and check the state of with the [Power Active (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\n\n\n---\n\n### Examples\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": false,\n    \"key\": {\n        \"key\": \"key.use\"\n    }\n}\n```\n\nThis example will provide a switch that is not active by default, and can be toggled with the `key.use` keybind.\n<br>\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": true,\n    \"retain_state\": true,\n    \"key\": {\n        \"key\": \"key.attack\"\n    },\n    \"condition\": {\n        \"type\": \"origins:sneaking\"\n    }\n}\n```\n\nThis example will provide a switch that is active by default and can be toggled via sneaking and pressing the `key.attack` keybind. This example will also retain its state if the entity is no longer sneaking.\n",
			"markdownDescription": "## Toggle\n\n---\n\n\n[Power Type](https://origins.readthedocs.io/en/latest/types/power_types/toggle)\n\nProvides a state that can be toggled with the specified [Key](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\nType ID: `origins:toggle`\n\n\n\n\n---\n\n### üìù Note\n\nThis power type provides a state that can be toggled with the [Toggle (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle) and check the state of with the [Power Active (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\n\n\n---\n\n### Examples\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": false,\n    \"key\": {\n        \"key\": \"key.use\"\n    }\n}\n```\n\nThis example will provide a switch that is not active by default, and can be toggled with the `key.use` keybind.\n<br>\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": true,\n    \"retain_state\": true,\n    \"key\": {\n        \"key\": \"key.attack\"\n    },\n    \"condition\": {\n        \"type\": \"origins:sneaking\"\n    }\n}\n```\n\nThis example will provide a switch that is active by default and can be toggled via sneaking and pressing the `key.attack` keybind. This example will also retain its state if the entity is no longer sneaking.\n"
		}
	}
}
