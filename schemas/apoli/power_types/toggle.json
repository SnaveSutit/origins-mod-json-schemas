{
	"type": "object",
	"properties": {
		"active_by_default": {
			"type": "boolean",
			"default": true,
			"description": "Determines whether the state of this power type should be ON by default.",
			"markdownDescription": "Determines whether the state of this power type should be ON by default."
		},
		"key": {
			"$ref": "../types/key.json",
			"description": "Which active key this power should respond to.",
			"markdownDescription": "Which active key this power should respond to."
		},
		"retain_state": {
			"type": "boolean",
			"default": true,
			"description": "Determines whether the power remains active even if the specified condition (if any) is no longer met. If set to `true`, the power will stay in its current state regardless of the condition. If set to `false`, the power will deactivate when the condition is not fulfilled.",
			"markdownDescription": "Determines whether the power remains active even if the specified condition (if any) is no longer met. If set to `true`, the power will stay in its current state regardless of the condition. If set to `false`, the power will deactivate when the condition is not fulfilled."
		},
		"type": {
			"description": "## Toggle\n\n---\n\n\n[Power Type](https://origins.readthedocs.io/en/latest/types/power_types/toggle)\n\nProvides a state that can be toggled with the specified [Key](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\nType ID: `origins:toggle`\n\n\n\n\n---\n\n### üìù Note\n\nThis power type provides a state that can be toggled with the [Toggle (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle) and check the state of with the [Power Active (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\n\n\n---\n\n### Examples\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": false,\n    \"key\": {\n        \"key\": \"key.use\"\n    }\n}\n```\n\nThis example will provide a switch that is not active by default, and can be toggled with the `key.use` keybind.\n<br>\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": true,\n    \"retain_state\": true,\n    \"key\": {\n        \"key\": \"key.attack\"\n    },\n    \"condition\": {\n        \"type\": \"origins:sneaking\"\n    }\n}\n```\n\nThis example will provide a switch that is active by default and can be toggled via sneaking and pressing the `key.attack` keybind. This example will also retain its state if the entity is no longer sneaking.\n",
			"markdownDescription": "## Toggle\n\n---\n\n\n[Power Type](https://origins.readthedocs.io/en/latest/types/power_types/toggle)\n\nProvides a state that can be toggled with the specified [Key](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\nType ID: `origins:toggle`\n\n\n\n\n---\n\n### üìù Note\n\nThis power type provides a state that can be toggled with the [Toggle (Entity Action Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle) and check the state of with the [Power Active (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/power_types/toggle).\n\n\n\n---\n\n### Examples\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": false,\n    \"key\": {\n        \"key\": \"key.use\"\n    }\n}\n```\n\nThis example will provide a switch that is not active by default, and can be toggled with the `key.use` keybind.\n<br>\n\n```json\n{\n    \"type\": \"origins:toggle\",\n    \"active_by_default\": true,\n    \"retain_state\": true,\n    \"key\": {\n        \"key\": \"key.attack\"\n    },\n    \"condition\": {\n        \"type\": \"origins:sneaking\"\n    }\n}\n```\n\nThis example will provide a switch that is active by default and can be toggled via sneaking and pressing the `key.attack` keybind. This example will also retain its state if the entity is no longer sneaking.\n"
		}
	},
	"x-intellij-html-description": "<hr>\n<h2>title: Toggle (Power Type)\ndate: 2021-04-07</h2>\n<h1>Toggle</h1>\n<p><a href=\"../power_types.md\">Power Type</a></p>\n<p>Provides a state that can be toggled with the specified <a href=\"../data_types/key.md\">Key</a>.</p>\n<p>Type ID: <code>origins:toggle</code></p>\n<p>!!! note</p>\n<pre><code>This power type provides a state that can be toggled with the [Toggle (Entity Action Type)](../entity_action_types/toggle.md) and check the state of with the [Power Active (Entity Condition Type)](../entity_condition_types/power_active.md).\n</code></pre>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>active_by_default</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td><code>true</code></td>\n<td>Determines whether the state of this power type should be ON by default.</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td><a href=\"../data_types/key.md\">Key</a></td>\n<td><code>{&quot;key&quot;: &quot;key.origins.primary_active&quot;}</code></td>\n<td>Which active key this power should respond to.</td>\n</tr>\n<tr>\n<td><code>retain_state</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td><code>true</code></td>\n<td>Determines whether the power remains active even if the specified condition (if any) is no longer met. If set to <code>true</code>, the power will stay in its current state regardless of the condition. If set to <code>false</code>, the power will deactivate when the condition is not fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">{\n    &quot;type&quot;: &quot;origins:toggle&quot;,\n    &quot;active_by_default&quot;: false,\n    &quot;key&quot;: {\n        &quot;key&quot;: &quot;key.use&quot;\n    }\n}\n</code></pre>\n<p>This example will provide a switch that is not active by default, and can be toggled with the <code>key.use</code> keybind.\n<br></p>\n<pre><code class=\"language-json\">{\n    &quot;type&quot;: &quot;origins:toggle&quot;,\n    &quot;active_by_default&quot;: true,\n    &quot;retain_state&quot;: true,\n    &quot;key&quot;: {\n        &quot;key&quot;: &quot;key.attack&quot;\n    },\n    &quot;condition&quot;: {\n        &quot;type&quot;: &quot;origins:sneaking&quot;\n    }\n}\n</code></pre>\n<p>This example will provide a switch that is active by default and can be toggled via sneaking and pressing the <code>key.attack</code> keybind. This example will also retain its state if the entity is no longer sneaking.</p>\n"
}
