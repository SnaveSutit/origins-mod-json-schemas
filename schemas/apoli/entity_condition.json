{
	"type": "object",
	"required": ["type"],
	"properties": {
		"inverted": {
			"description": "If true, the condition will be inverted.",
			"markdownDescription": "If true, the condition will be inverted.",
			"type": "boolean",
			"default": true
		},
		"type": {
			"description": "## Entity Condition Types\n\n---\n\n\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the `condition` object field (or `entity_condition` in other power/condition types), which restricts when a power is active.\n\n---\n\n",
			"markdownDescription": "## Entity Condition Types\n\n---\n\n\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the `condition` object field (or `entity_condition` in other power/condition types), which restricts when a power is active.\n\n---\n\n"
		}
	},
	"allOf": [
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:ability", "origins:ability"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/ability.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:advancement", "origins:advancement"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/advancement.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:air", "origins:air"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/air.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:attribute", "origins:attribute"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/attribute.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:biome", "origins:biome"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/biome.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:block_collision", "origins:block_collision"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/block_collision.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:block_in_radius", "origins:block_in_radius"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/block_in_radius.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:brightness", "origins:brightness"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/brightness.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:climbing", "origins:climbing"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/climbing.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:collided_horizontally", "origins:collided_horizontally"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/collided_horizontally.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:command", "origins:command"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/command.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:creative_flying", "origins:creative_flying"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/creative_flying.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:daytime", "origins:daytime"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/daytime.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:dimension", "origins:dimension"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/dimension.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:distance_from_coordinates", "origins:distance_from_coordinates"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/distance_from_coordinates.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:elytra_flight_possible", "origins:elytra_flight_possible"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/elytra_flight_possible.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:enchantment", "origins:enchantment"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/enchantment.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:entity_group", "origins:entity_group"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/entity_group.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:entity_type", "origins:entity_type"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/entity_type.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:equipped_item", "origins:equipped_item"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/equipped_item.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:exists", "origins:exists"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/exists.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:exposed_to_sky", "origins:exposed_to_sky"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/exposed_to_sky.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:exposed_to_sun", "origins:exposed_to_sun"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/exposed_to_sun.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:fall_distance", "origins:fall_distance"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/fall_distance.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:fall_flying", "origins:fall_flying"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/fall_flying.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:fluid_height", "origins:fluid_height"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/fluid_height.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:food_level", "origins:food_level"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/food_level.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:gamemode", "origins:gamemode"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/gamemode.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:glowing", "origins:glowing"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/glowing.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:health", "origins:health"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/health.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:inventory", "origins:inventory"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/inventory.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:invisible", "origins:invisible"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/invisible.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:in_block", "origins:in_block"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/in_block.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:in_block_anywhere", "origins:in_block_anywhere"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/in_block_anywhere.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:in_rain", "origins:in_rain"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/in_rain.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:in_snow", "origins:in_snow"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/in_snow.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:in_tag", "origins:in_tag"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/in_tag.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:in_thunderstorm", "origins:in_thunderstorm"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/in_thunderstorm.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:living", "origins:living"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/living.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:moving", "origins:moving"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/moving.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:nbt", "origins:nbt"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/nbt.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:on_block", "origins:on_block"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/on_block.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:on_fire", "origins:on_fire"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/on_fire.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:origin", "origins:origin"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/origin.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:passenger", "origins:passenger"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/passenger.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:passenger_recursive", "origins:passenger_recursive"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/passenger_recursive.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:power", "origins:power"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/power.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:power_active", "origins:power_active"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/power_active.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:power_type", "origins:power_type"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/power_type.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:predicate", "origins:predicate"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/predicate.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:raycast", "origins:raycast"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/raycast.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:relative_health", "origins:relative_health"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/relative_health.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:resource", "origins:resource"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/resource.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:riding", "origins:riding"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/riding.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:riding_recursive", "origins:riding_recursive"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/riding_recursive.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:riding_root", "origins:riding_root"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/riding_root.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:saturation_level", "origins:saturation_level"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/saturation_level.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:scoreboard", "origins:scoreboard"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/scoreboard.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:set_size", "origins:set_size"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/set_size.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:sneaking", "origins:sneaking"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/sneaking.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:sprinting", "origins:sprinting"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/sprinting.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:status_effect", "origins:status_effect"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/status_effect.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:submerged_in", "origins:submerged_in"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/submerged_in.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:swimming", "origins:swimming"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/swimming.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:tamed", "origins:tamed"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/tamed.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:time_of_day", "origins:time_of_day"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/time_of_day.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:using_effective_tool", "origins:using_effective_tool"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/using_effective_tool.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:using_item", "origins:using_item"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/using_item.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:xp_levels", "origins:xp_levels"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/xp_levels.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:xp_points", "origins:xp_points"]
					}
				}
			},
			"then": {
				"$ref": "entity_condition_types/xp_points.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:and", "origins:and"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["conditions"],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "All of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## And\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n",
						"markdownDescription": "## And\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/and)\n\nChecks whether all of the provided conditions are fulfilled.\n\nType ID: `origins:and`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:and\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:daytime\"\n        },\n        {      \n            \"type\": \"origins:invisible\"\n        }\n    ]\n}\n```\n\nThis example will check if it is both daytime, and the entity is invisible.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: And (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>And</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Checks whether all of the provided conditions are fulfilled.</p>\n<p>Type ID: <code>origins:and</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>conditions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../condition_types.md\">Condition Types</a></td>\n<td></td>\n<td>All of these condition types have to be fulfilled in order for this condition to be fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:and&quot;,\n    &quot;conditions&quot;: [\n        {\n            &quot;type&quot;: &quot;origins:daytime&quot;\n        },\n        {      \n            &quot;type&quot;: &quot;origins:invisible&quot;\n        }\n    ]\n}\n</code></pre>\n<p>This example will check if it is both daytime, and the entity is invisible.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:chance", "origins:chance"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["chance"],
				"properties": {
					"chance": {
						"type": "number",
						"description": "The value to compare the randomly generated number to.",
						"markdownDescription": "The value to compare the randomly generated number to."
					},
					"type": {
						"description": "## Chance\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n",
						"markdownDescription": "## Chance\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/chance)\n\nGenerates a random number between 0.0 and 1.0 and checks if it's less than a specified value.\n\nType ID: `origins:chance`\n\n---\n\n###\tExamples\n\n```json\n\"condition\": {\n\t\"type\": \"origins:chance\",\n\t\"chance\": 0.5\n}\n```\n\nThis example will evaluate to true 50% of the time.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Chance (Meta Condition Type)\ndate: 2023-11-19</h2>\n<h1>Chance</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Generates a random number between 0.0 and 1.0 and checks if it&#39;s less than a specified value.</p>\n<p>Type ID: <code>origins:chance</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>chance</code></td>\n<td><a href=\"../data_types/float.md\">Float</a></td>\n<td></td>\n<td>The value to compare the randomly generated number to.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n\t&quot;type&quot;: &quot;origins:chance&quot;,\n\t&quot;chance&quot;: 0.5\n}\n</code></pre>\n<p>This example will evaluate to true 50% of the time.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:constant", "origins:constant"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["value"],
				"properties": {
					"value": {
						"type": "boolean",
						"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
						"markdownDescription": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
					},
					"type": {
						"description": "## Constant\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n",
						"markdownDescription": "## Constant\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant)\n\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n\nType ID: `origins:constant`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:constant\",\n    \"value\": true\n}\n```\n\nThis example is always true.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Constant (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>Constant</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Provides a constant state where it&#39;s either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.</p>\n<p>Type ID: <code>origins:constant</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>value</code></td>\n<td><a href=\"../data_types/boolean.md\">Boolean</a></td>\n<td></td>\n<td>If true, the condition is always fulfilled. If false, the condition is never fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:constant&quot;,\n    &quot;value&quot;: true\n}\n</code></pre>\n<p>This example is always true.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"enum": ["apoli:or", "origins:or"]
					}
				}
			},
			"then": {
				"type": "object",
				"required": ["conditions"],
				"properties": {
					"conditions": {
						"type": "array",
						"items": {
							"$ref": "#"
						},
						"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
						"markdownDescription": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled."
					},
					"type": {
						"description": "## Or\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n",
						"markdownDescription": "## Or\n\n---\n\n\n[Meta Condition Type](https://origins.readthedocs.io/en/latest/types/meta_condition_types/or)\n\nChecks whether any (one or more) of the provided conditions are fulfilled.\n\nType ID: `origins:or`\n\n---\n\n### Examples\n\n```json\n\"condition\": {\n    \"type\": \"origins:or\",\n    \"conditions\": [\n        {\n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:poison\"\n        },\n        {    \n            \"type\": \"origins:status_effect\",\n            \"effect\": \"minecraft:wither\"\n        }\n    ]\n}\n```\n\nThis example will check if the entity has either the Poison or Wither status effects.\n"
					}
				},
				"x-intellij-html-description": "<hr>\n<h2>title: Or (Meta Condition Type)\ndate: 2021-04-07</h2>\n<h1>Or</h1>\n<p><a href=\"../meta_condition_types.md\">Meta Condition Type</a></p>\n<p>Checks whether any (one or more) of the provided conditions are fulfilled.</p>\n<p>Type ID: <code>origins:or</code></p>\n<h3>Fields</h3>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>conditions</code></td>\n<td><a href=\"../data_types/array.md\">Array</a> of <a href=\"../condition_types.md\">Condition Types</a></td>\n<td></td>\n<td>Any of these condition types have to be fulfilled in order for this condition to be fulfilled.</td>\n</tr>\n</tbody></table>\n<h3>Examples</h3>\n<pre><code class=\"language-json\">&quot;condition&quot;: {\n    &quot;type&quot;: &quot;origins:or&quot;,\n    &quot;conditions&quot;: [\n        {\n            &quot;type&quot;: &quot;origins:status_effect&quot;,\n            &quot;effect&quot;: &quot;minecraft:poison&quot;\n        },\n        {    \n            &quot;type&quot;: &quot;origins:status_effect&quot;,\n            &quot;effect&quot;: &quot;minecraft:wither&quot;\n        }\n    ]\n}\n</code></pre>\n<p>This example will check if the entity has either the Poison or Wither status effects.</p>\n"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:attacker_condition"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/attacker_condition.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:attack_target_condition"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/attack_target_condition.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:base_enchantment"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/base_enchantment.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:cached_block_in_radius"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/cached_block_in_radius.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:can_have_effect"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/can_have_effect.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:can_take_damage"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/can_take_damage.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:compare_resource"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/compare_resource.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:custom_entity_id"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/custom_entity_id.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:entity_in_radius"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/entity_in_radius.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:grounded"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/grounded.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:hostile"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/hostile.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:join_invulnerability_ticks"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/join_invulnerability_ticks.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:key_pressed"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/key_pressed.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:max_health"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/max_health.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:moving"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/moving.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:particle_in_radius"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/particle_in_radius.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:player_model_type"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/player_model_type.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:raining"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/raining.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:raycast"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/raycast.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:status_effect_tag"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/status_effect_tag.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:structure"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/structure.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:thundering"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/thundering.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:trident_enchantment"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/trident_enchantment.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "apugli:velocity"
					}
				}
			},
			"then": {
				"$ref": "../apugli/entity_condition_types/velocity.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "extraorigins:piglin_safe"
					}
				}
			},
			"then": {
				"$ref": "../extraorigins/entity_condition_types/piglin_safe.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "extraorigins:radial_menu_direction"
					}
				}
			},
			"then": {
				"$ref": "../extraorigins/entity_condition_types/radial_menu_direction.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:has_item_cooldown"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_condition_types/has_item_cooldown.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:in_raid_area"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_condition_types/in_raid_area.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:is_first_person"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_condition_types/is_first_person.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:is_full_moon"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_condition_types/is_full_moon.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:nearby_entities"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_condition_types/nearby_entities.json"
			}
		},
		{
			"if": {
				"required": ["type"],
				"properties": {
					"type": {
						"const": "moborigins:time_since_rest"
					}
				}
			},
			"then": {
				"$ref": "../moborigins/entity_condition_types/time_since_rest.json"
			}
		}
	],
	"x-intellij-html-description": "<hr>\n<h2>title: Entity Condition Types\ndate: 2021-04-04</h2>\n<h1>Entity Condition Types</h1>\n<p>Entity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the <code>condition</code> object field (or <code>entity_condition</code> in other power/condition types), which restricts when a power is active.</p>\n<h3>List</h3>\n<ul>\n<li><a href=\"entity_condition_types/ability.md\">Ability</a></li>\n<li><a href=\"entity_condition_types/advancement.md\">Advancement</a></li>\n<li><a href=\"entity_condition_types/air.md\">Air</a></li>\n<li><a href=\"entity_condition_types/attribute.md\">Attribute</a></li>\n<li><a href=\"entity_condition_types/biome.md\">Biome</a></li>\n<li><a href=\"entity_condition_types/block_collision.md\">Block Collision</a></li>\n<li><a href=\"entity_condition_types/block_in_radius.md\">Block In Radius</a></li>\n<li><a href=\"entity_condition_types/brightness.md\">Brightness</a></li>\n<li><a href=\"entity_condition_types/climbing.md\">Climbing</a></li>\n<li><a href=\"entity_condition_types/collided_horizontally.md\">Collided Horizontally</a></li>\n<li><a href=\"entity_condition_types/command.md\">Command</a></li>\n<li><a href=\"entity_condition_types/creative_flying.md\">Creative Flying</a></li>\n<li><a href=\"entity_condition_types/daytime.md\">Daytime</a></li>\n<li><a href=\"entity_condition_types/dimension.md\">Dimension</a></li>\n<li><a href=\"entity_condition_types/distance_from_coordinates.md\">Distance From Coordinates</a></li>\n<li><a href=\"entity_condition_types/elytra_flight_possible.md\">Elytra Flight Possible</a></li>\n<li><a href=\"entity_condition_types/enchantment.md\">Enchantment</a></li>\n<li><a href=\"entity_condition_types/entity_group.md\">Entity Group</a></li>\n<li><a href=\"entity_condition_types/entity_type.md\">Entity Type</a></li>\n<li><a href=\"entity_condition_types/equipped_item.md\">Equipped Item</a></li>\n<li><a href=\"entity_condition_types/exists.md\">Exists</a></li>\n<li><a href=\"entity_condition_types/exposed_to_sky.md\">Exposed to Sky</a></li>\n<li><a href=\"entity_condition_types/exposed_to_sun.md\">Exposed to Sun</a></li>\n<li><a href=\"entity_condition_types/fall_distance.md\">Fall Distance</a></li>\n<li><a href=\"entity_condition_types/fall_flying.md\">Fall Flying</a></li>\n<li><a href=\"entity_condition_types/fluid_height.md\">Fluid Height</a></li>\n<li><a href=\"entity_condition_types/food_level.md\">Food Level</a></li>\n<li><a href=\"entity_condition_types/gamemode.md\">Gamemode</a></li>\n<li><a href=\"entity_condition_types/glowing.md\">Glowing</a></li>\n<li><a href=\"entity_condition_types/health.md\">Health</a></li>\n<li><a href=\"entity_condition_types/in_block_anywhere.md\">In Block Anywhere</a></li>\n<li><a href=\"entity_condition_types/in_block.md\">In Block</a></li>\n<li><a href=\"entity_condition_types/in_rain.md\">In Rain</a></li>\n<li><a href=\"entity_condition_types/in_snow.md\">In Snow</a></li>\n<li><a href=\"entity_condition_types/in_tag.md\">In Tag</a></li>\n<li><a href=\"entity_condition_types/in_thunderstorm.md\">In Thunderstorm</a></li>\n<li><a href=\"entity_condition_types/inventory.md\">Inventory</a></li>\n<li><a href=\"entity_condition_types/invisible.md\">Invisible</a></li>\n<li><a href=\"entity_condition_types/living.md\">Living</a></li>\n<li><a href=\"entity_condition_types/moving.md\">Moving</a></li>\n<li><a href=\"entity_condition_types/nbt.md\">NBT</a></li>\n<li><a href=\"entity_condition_types/on_block.md\">On Block</a></li>\n<li><a href=\"entity_condition_types/on_fire.md\">On Fire</a></li>\n<li><a href=\"entity_condition_types/origin.md\">Origin</a></li>\n<li><a href=\"entity_condition_types/passenger_recursive.md\">Passenger Recursive</a></li>\n<li><a href=\"entity_condition_types/passenger.md\">Passenger</a></li>\n<li><a href=\"entity_condition_types/power_active.md\">Power Active</a></li>\n<li><a href=\"entity_condition_types/power_type.md\">Power Type</a></li>\n<li><a href=\"entity_condition_types/power.md\">Power</a></li>\n<li><a href=\"entity_condition_types/predicate.md\">Predicate</a></li>\n<li><a href=\"entity_condition_types/raycast.md\">Raycast</a></li>\n<li><a href=\"entity_condition_types/relative_health.md\">Relative Health</a></li>\n<li><a href=\"entity_condition_types/resource.md\">Resource</a></li>\n<li><a href=\"entity_condition_types/riding_recursive.md\">Riding Recursive</a></li>\n<li><a href=\"entity_condition_types/riding_root.md\">Riding Root</a></li>\n<li><a href=\"entity_condition_types/riding.md\">Riding</a></li>\n<li><a href=\"entity_condition_types/saturation_level.md\">Saturation Level</a></li>\n<li><a href=\"entity_condition_types/scoreboard.md\">Scoreboard</a></li>\n<li><a href=\"entity_condition_types/set_size.md\">Set Size</a></li>\n<li><a href=\"entity_condition_types/sneaking.md\">Sneaking</a></li>\n<li><a href=\"entity_condition_types/sprinting.md\">Sprinting</a></li>\n<li><a href=\"entity_condition_types/status_effect.md\">Status Effect</a></li>\n<li><a href=\"entity_condition_types/submerged_in.md\">Submerged In</a></li>\n<li><a href=\"entity_condition_types/swimming.md\">Swimming</a></li>\n<li><a href=\"entity_condition_types/tamed.md\">Tamed</a></li>\n<li><a href=\"entity_condition_types/time_of_day.md\">Time Of Day</a></li>\n<li><a href=\"entity_condition_types/using_effective_tool.md\">Using Effective Tool</a></li>\n<li><a href=\"entity_condition_types/using_item.md\">Using Item</a></li>\n<li><a href=\"entity_condition_types/xp_levels.md\">XP Levels</a></li>\n<li><a href=\"entity_condition_types/xp_points.md\">XP Points</a></li>\n</ul>\n"
}
